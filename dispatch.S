/* ------------------------------------------------------------------------ */
/*  ディスパッチャー for Atmel AVR                                          */
/*  ※プロジェクト HOSからAVRのディスパッチャーを参照                       */
/*                                                                          */
/*  Hyper Operating System V4  μITRON4.0仕様 Real-Time OS                  */
/*    プロセッサ抽象化コンポーネント (Atmel ATmega)                         */
/*    コンテキスト制御                                                      */
/*                                                                          */
/*                                  Copyright (C) 1998-2002 by Project HOS  */
/*                                  http://sourceforge.jp/projects/hos/     */
/* ------------------------------------------------------------------------ */
#define __SFR_OFFSET 0
#include <avr/io.h>

__SREG__ = 0x3f     ;status register
__SP_H__ = 0x3e     ;SP high
__SP_L__ = 0x3d     ;SP low
__tmp_reg__ = 0     ;r0
__zero_reg__ = 1    ;r1: always zero

;
;AVR GCCの破壊レジスタ : r0,r18-r27(X register),r30-r31(Z register)
;AVR GCCの非破壊レジスタ : r2-r17,r28-r29(Y register)
;関数から戻る時は必ずr1レジスタを0にする  r1=0
;AVR GCCの最初の引数 : r25:r24
;AVR GCCの2番目の引数 : r23:r22
;AVR GCCの3番目の引数 : r21:r20
;AVR GCCの4番目の引数 : r19:r18
;AVR GCCの4番目の戻り値 : r25:r24

  .text

/************************************************
  disable interrupt
*************************************************/
	.global	disableInterrupt
	.func	disableInterrupt
disableInterrupt:
	cli  /* disable interrupt */
	ret
	.endfunc

/************************************************
  enable interrupt
*************************************************/
	.global	enableInterrupt
	.func	enableInterrupt
enableInterrupt:
	sei			/* enable interrupt */
	ret
	.endfunc

/************************************************
 コンテキストをロードし、タスクを開始
 void sta_ctx(
 void *exe ) //実行コンテキストの保存先
 r25:r24にスタックポインタの保存元アドレス
************************************************/
  .global  sta_ctx
  .func    sta_ctx
sta_ctx:
  movw  XL,r24  ; これから展開されるコンテキストの保存アドレスを取得
  ld  r0, X+  ; 保存元からスタックポインタの下位を取得
  out __SP_L__,r0  ; スタックポインタの下位をIOレジスタのスタックポインタの下位に展開
  ld  r0,X  ; 保存元からスタックポインタの上位を取得
  out __SP_H__,r0  ; スタックポインタの上位をIOレジスタのスタックポインタの上位に展開

  pop r29   ; 非破壊レジスタのYレジスタの上位を展開
  pop r28   ; 非破壊レジスタのYレジスタの下位を展開

  pop r17  ; 非破壊レジスタの展開
  pop r16  ; 非破壊レジスタの展開
  pop r15  ; 非破壊レジスタの展開
  pop r14  ; 非破壊レジスタの展開
  pop r13  ; 非破壊レジスタの展開
  pop r12  ; 非破壊レジスタの展開
  pop r11  ; 非破壊レジスタの展開
  pop r10  ; 非破壊レジスタの展開
  pop r9  ; 非破壊レジスタの展開
  pop r8  ; 非破壊レジスタの展開
  pop r7  ; 非破壊レジスタの展開
  pop r6  ; 非破壊レジスタの展開
  pop r5  ; 非破壊レジスタの展開
  pop r4  ; 非破壊レジスタの展開
  pop r3  ; 非破壊レジスタの展開
  pop r2  ; 非破壊レジスタの展開
  pop r0  ; ステータスレジスタは代入しない

  ret
  .endfunc


/************************************************
 実行コンテキストの切替
 void swi_ctx(
 void *pre, //現在のコンテキストの保存先
 void *post) //切り替えるコンテキスト
 r25:r24にスタックポインタの保存先アドレス
 r23:r22にスタックポインタの保存元アドレス
************************************************/
  .global  swi_ctx
  .func    swi_ctx
swi_ctx:
  in    r0,__SREG__ ; ステータスレジスタを保存
  cli     ; 一旦割り込み禁止
  push  r0    ; ステータスレジスタを保存
  push  r2  ; 非破壊レジスタの保存
  push  r3  ; 非破壊レジスタの保存
  push  r4  ; 非破壊レジスタの保存
  push  r5  ; 非破壊レジスタの保存
  push  r6  ; 非破壊レジスタの保存
  push  r7  ; 非破壊レジスタの保存
  push  r8  ; 非破壊レジスタの保存
  push  r9  ; 非破壊レジスタの保存
  push  r10  ; 非破壊レジスタの保存
  push  r11  ; 非破壊レジスタの保存
  push  r12  ; 非破壊レジスタの保存
  push  r13  ; 非破壊レジスタの保存
  push  r14  ; 非破壊レジスタの保存
  push  r15  ; 非破壊レジスタの保存
  push  r16  ; 非破壊レジスタの保存
  push  r17  ; 非破壊レジスタの保存

  push  r28   ; 非破壊レジスタのYレジスタの下位を保存
  push  r29   ; 非破壊レジスタのYレジスタの上位を保存

  movw  XL,r24  ; これから保存されるコンテキストの保存アドレスを取得
  in  r0,__SP_L__  ; IOレジスタのスタックポインタの下位を読み出し
  st  X+,r0  ; IOレジスタのスタックポインタの下位を保存
  in  r0,__SP_H__ ; IOレジスタのスタックポインタの上位を読み出し
  st  X,r0  ; IOレジスタのスタックポインタの上位を保存

  movw  XL,r22  ; これから展開されるコンテキストの保存アドレスを取得
  ld  r0, X+  ; 保存元からスタックポインタの下位を取得
  out __SP_L__,r0  ; スタックポインタの下位をIOレジスタのスタックポインタの下位に展開
  ld  r0,X  ; 保存元からスタックポインタの上位を取得
  out __SP_H__,r0  ; スタックポインタの上位をIOレジスタのスタックポインタの上位に展開

  pop r29   ; 非破壊レジスタのYレジスタの上位を展開
  pop r28   ; 非破壊レジスタのYレジスタの下位を展開

  pop r17  ; 非破壊レジスタの展開
  pop r16  ; 非破壊レジスタの展開
  pop r15  ; 非破壊レジスタの展開
  pop r14  ; 非破壊レジスタの展開
  pop r13  ; 非破壊レジスタの展開
  pop r12  ; 非破壊レジスタの展開
  pop r11  ; 非破壊レジスタの展開
  pop r10  ; 非破壊レジスタの展開
  pop r9  ; 非破壊レジスタの展開
  pop r8  ; 非破壊レジスタの展開
  pop r7  ; 非破壊レジスタの展開
  pop r6  ; 非破壊レジスタの展開
  pop r5  ; 非破壊レジスタの展開
  pop r4  ; 非破壊レジスタの展開
  pop r3  ; 非破壊レジスタの展開
  pop r2  ; 非破壊レジスタの展開
  pop r0  ; ステータスレジスタの戻し
  out __SREG__,r0  ; ステータスレジスタの戻し

  ret  ; リターン時にスタックに保存されたPCが展開される
  .endfunc

/* -------------------------------------------------------------------------*/
/*  Copyright (C) 1998-2002 by Project HOS                                  */
/* -------------------------------------------------------------------------*/
